# any实现参考
- https://www.bilibili.com/video/BV1B84y1v7vk/?spm_id_from=333.788&vd_source=7e0f3f1d756b94c85b97bd8662879194

# json格式
- https://www.w3school.com.cn/js/js_json_arrays.asp

# c++ concept概念
- https://blog.csdn.net/gaoZhuanMing/article/details/120228317

# hash实现
- 借鉴clickhouse中的SipHash


# 编译运行
- 下载代码
```
$ git clone git@github.com:awfeequdng/any_serialize.git --recursive
```
- 设置编译器为clang++ (我编译器为clang15.0, 程序采用C++20的语法)
```
$ export CC=clang
$ export CXX=clang++
```

- 进入根目录并编译
```
$ cd any_serialize
$ make
```

- 运行程序：序列化和反序列化的测试在test_dump函数中进行
```
$ ./any
```
程序打印信息并正常退出，说明序列化和反序列化正确

# 不足之处
- 由于my_traits::Any类在序列化时没有带上类型信息，在反序列化时，解析对象结构时，只能解析Singer对象，还不支持其他对象的解析。
为了解决这种情况，实现了一个带有类型信息的版本，该版本代码暂时被注释掉了。
- Person、Singer、Address、Friend都有一些公共的函数，可以将这些函数抽象到基类中去。